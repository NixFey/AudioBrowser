@page "/"
@using AudioBrowser.Services
@using Humanizer.Bytes
@using Microsoft.Extensions.Options
@using Options = AudioBrowser.Options
@inject IOptionsMonitor<Options> Options
@inject NavigationManager NavManager
@inject IServiceProvider Services
@inject ILogger<Program> Logger
@attribute [StreamRendering]
@rendermode InteractiveServer


<PageTitle>Files</PageTitle>

<h1>Files</h1>

@if (_files is null)
{
    <p>Unable to get files</p>
}
else
{
    @if (_activeAudioPath is not null)
    {
        <div style="position: fixed;bottom: 0;left: 0;right: 0;width: 100%;border-top: 1px solid #666;background: white;padding: 0.5em;">
            <audio style="width: 100%" src="/file/@_activeAudioPath" controls autoplay></audio>
        </div>
    }
    
    @if (Path is not null && Path != "/" && Path != "")
    {
        <p>@(Path)</p>
        <p><a href="javascript:false;" @onclick="@(TraverseUp)">Go up</a></p>
    }
    
    <ul style="margin-bottom: 10em;">
        @foreach (var file in _files)
        {
            <li>
                <a
                    href="javascript:false;"
                    @onclick="@(() => ClickFile(file))">
                    @(!file.Attributes.HasFlag(FileAttributes.Directory) ? XAttrsService.GetBool((FileInfo)file, "heard") ?? false ? "✅" : "➡️" : "📁")
                    @file.Name
                    @(file is FileInfo fi ? $" - {Math.Round(ByteSize.FromBytes(fi.Length).Kilobytes)} KB" : "")
                </a>
            </li>
        }
    </ul>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Path { get; set; }

    private DirectoryInfo? _directory;
    private FileSystemInfo[]? _files;

    private string? _activeAudioPath;

    protected override Task OnInitializedAsync()
    {
        //foreach (var service in Services.GetServices<IHostedService>())
        //{
        //    if (service is WatcherService watcherService)
        //    {
                WatcherService.FilesChanged += async (_, _) =>
                {
                    Logger.LogInformation("Got a change, rerendering");
                    await InvokeAsync(async () =>
                    {
                        await OnInitializedAsync();
                        StateHasChanged();
                    });
                };                
            //}
        //}
        
        var rootPath = Options.CurrentValue.FilesDirectory.FullName;
        _directory = new DirectoryInfo(System.IO.Path.Join(Options.CurrentValue.FilesDirectory.FullName, Path));
        if (!_directory.FullName.StartsWith(rootPath)) throw new ApplicationException("Bad.");
        _files = _directory.EnumerateFileSystemInfos().OrderByDescending(f => f.Attributes.HasFlag(FileAttributes.Directory)).ThenBy(f => f.Name).ToArray();

        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    private void ClickFile(FileSystemInfo fileSystemInfo)
    {
        var relativePath = System.IO.Path.GetRelativePath(Options.CurrentValue.FilesDirectory.FullName, fileSystemInfo.FullName);
        if (fileSystemInfo.Attributes.HasFlag(FileAttributes.Directory))
        {
            NavManager.NavigateTo(NavManager.GetUriWithQueryParameter("path", relativePath));
        }
        else
        {
            var currentStatus = XAttrsService.GetBool((FileInfo)fileSystemInfo, "heard");
            if (currentStatus != true)
                XAttrsService.SetBool((FileInfo)fileSystemInfo, "heard", !(currentStatus ?? false));
            _activeAudioPath = relativePath;
            StateHasChanged();
        }
    }

    private void TraverseUp()
    {
        var relativePath = System.IO.Path.GetRelativePath(Options.CurrentValue.FilesDirectory.FullName, System.IO.Path.Join(_directory!.FullName, ".."));
        NavManager.NavigateTo(NavManager.GetUriWithQueryParameter("path", relativePath));
    }
    
}